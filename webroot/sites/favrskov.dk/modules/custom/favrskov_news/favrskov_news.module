<?php

use Drupal\Core\Pager\PagerManagerInterface;
use Drupal\node\Entity\Node;

/**
* Alter the list of projects to be updated by locale's interface translation.
*
* Locale module attempts to update the translation of those modules returned
* by \Drupal\update\UpdateManager::getProjects(). Using this hook, the data
* returned by \Drupal\update\UpdateManager::getProjects() can be altered or
* extended.
*
* Modules or distributions that use a dedicated translation server should use
* this hook to specify the interface translation server pattern, or to add
* additional custom/non-Drupal.org modules to the list of modules known to
* locale.
* - "interface translation server pattern": URL of the .po translation files
*   used to download the files from. The URL contains tokens which will be
*   replaced by appropriate values.
* The following tokens are available for the server pattern:
* - "%core": Core version. Value example: "8.x".
* - "%project": Project name. Value examples: "drupal", "media_gallery".
* - "%version": Project version release. Value examples: "8.1", "8.x-1.0".
* - "%language": Language code. Value examples: "fr", "pt-pt".
*
* @param array $projects
*   Project data as returned by \Drupal\update\UpdateManager::getProjects().
*
* @see locale_translation_project_list()
* @ingroup interface_translation_properties
*/
function favrskov_news_locale_translation_projects_alter(array &$projects) {
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('favrskov_news')->getPath();
  $projects['favrskov_news']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}

/**
 * Implements hook_cron().
 */
function favrskov_news_cron() {
  $next_run = \Drupal::state()->get('favrskov_news_next_run', 0);
  if ($next_run > time()) {
    return;
  }

  $node_ids = \Drupal::entityQuery('node')
    ->condition('created' , strtotime('-3 months'), '<')
    ->condition('field_keep_published', 0)
    ->condition('status', 1)
    ->range(NULL, 100)
    ->execute();

  $nodes = Node::loadMultiple($node_ids);
  foreach ($nodes as $node) {
    $node->set('moderation_state', 'archived');
    $node->save();
  }

  \Drupal::state()->set('favrskov_news_next_run', strtotime('+1 day'));
}

function favrskov_preprocess_block__inline_block__news_list(array &$variables) {
  $variables['#cache']['tags'][] = 'node_list';

  /** @var \Drupal\block_content\Entity\BlockContent $block */
  $block = $variables['elements']['content']['#block_content'];

  $categories = [];
  if ($block->hasField('field_news_category') && !$block->get('field_news_category')->isEmpty()) {
    foreach($block->get('field_news_category')->getValue() as $item) {
      $categories[] = $item['target_id'];
    }
  }

  $query = Drupal::entityQuery('node')
    ->condition('type', 'news')
    ->condition('status', 1)
    ->sort('sticky' , 'desc')
    ->sort('field_list_date', 'desc');
  if (!empty($categories)) {
    $query->condition('field_news_categories', $categories, 'IN');
  }

  if ($block->hasField('field_paginating') && $block->get('field_paginating')->first()->getValue()['value'] == 1) {
    /** @var PagerManagerInterface $pagerManager */
    $pagerManager = \Drupal::service('pager.manager');

    $countQuery = Drupal::entityQuery('node')
      ->condition('type', 'news')
      ->condition('status', 1);
    if (!empty($categories)) {
      $countQuery->condition('field_news_categories', $categories, 'IN');
    }
    $total = $countQuery->count()->execute();

    $num_per_page = 10;
    $pager = $pagerManager->createPager($total, $num_per_page);
    $page = $pager->getCurrentPage();
    $offset = $num_per_page * $page;

    $query->range($offset, $num_per_page);

    // Finally, add the pager to the render array, and return.
    $variables['pager'] = ['#type' => 'pager'];
  }

  $nids = $query->execute();
  $nodes = Node::loadMultiple($nids);

  $variables['items'] = Drupal::entityTypeManager()->getViewBuilder('node')->viewMultiple($nodes, 'teaser');
}
