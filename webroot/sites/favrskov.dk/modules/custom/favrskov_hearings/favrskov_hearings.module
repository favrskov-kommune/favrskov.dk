<?php

use Drupal\Core\Pager\PagerManagerInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
* Alter the list of projects to be updated by locale's interface translation.
*
* Locale module attempts to update the translation of those modules returned
* by \Drupal\update\UpdateManager::getProjects(). Using this hook, the data
* returned by \Drupal\update\UpdateManager::getProjects() can be altered or
* extended.
*
* Modules or distributions that use a dedicated translation server should use
* this hook to specify the interface translation server pattern, or to add
* additional custom/non-Drupal.org modules to the list of modules known to
* locale.
* - "interface translation server pattern": URL of the .po translation files
*   used to download the files from. The URL contains tokens which will be
*   replaced by appropriate values.
* The following tokens are available for the server pattern:
* - "%core": Core version. Value example: "8.x".
* - "%project": Project name. Value examples: "drupal", "media_gallery".
* - "%version": Project version release. Value examples: "8.1", "8.x-1.0".
* - "%language": Language code. Value examples: "fr", "pt-pt".
*
* @param array $projects
*   Project data as returned by \Drupal\update\UpdateManager::getProjects().
*
* @see locale_translation_project_list()
* @ingroup interface_translation_properties
*/
function favrskov_hearings_locale_translation_projects_alter(array &$projects) {
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('favrskov_hearings')->getPath();
  $projects['favrskov_hearings']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}

/**
 * Implements hook_cron().
 */
function favrskov_hearings_cron() {
  $next_run = \Drupal::state()->get('favrskov_hearings_next_run', 0);
  if ($next_run > time()) {
    return;
  }

  $node_ids = \Drupal::entityQuery('node')
    ->condition('type', 'hearing_page')
    ->condition('field_deadline' , strtotime('-6 months'), '<')
    ->condition('status', 1)
    ->range(NULL, 100)
    ->execute();

  $nodes = Node::loadMultiple($node_ids);
  foreach ($nodes as $node) {
    $node->set('moderation_state', 'archived');
    $node->save();
  }

  \Drupal::state()->set('favrskov_hearings_next_run', strtotime('+1 day'));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function favrskov_hearings_preprocess_node__hearing_page(&$variables) {
  /** @var Node $node */
  $node = $variables['node'];
  if (isset($variables['content']['field_cta']) && isset($variables['content']['field_cta'][0])) {
    $variables['content']['field_cta'][0]['#attributes']['class'][] = 'button';
    $variables['content']['field_cta'][0]['#title'] = atom_str('hearings-cta');
    atom_cache($variables['content']['field_cta'][0], ['hearings-cta']);
  }
  // To satisfy Cludo
  $components = explode(' ', $variables['content']['field_deadline'][0]['#markup']);
  $variables['content']['field_deadline'][0]['#markup'] = '<div>' . implode('</div><div>', $components) . '</div>';
  $components = explode(' ', $variables['content']['field_publishing_date'][0]['#markup']);
  $variables['content']['field_publishing_date'][0]['#markup'] = '<div>' . implode('</div><div>', $components) . '</div>';

  $variables['content']['back_link'] = atom('hearings-back-link');
  $variables['content']['summary'] = ['#markup' => $node->get('body')->first()->getValue()['summary']];

  $variables['content']['deadline_label'] = t('Hearing deadline');
  $hearing_type = $node->get('field_type')->first()->target_id;
  $decision_category_id = \Drupal::entityQuery('taxonomy_term')
    ->condition('name','AfgÃ¸relser')
    ->execute();

  if ($hearing_type === reset($decision_category_id)) {
    $variables['content']['deadline_label'] = t('Deadline for complaints');
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function favrskov_hearings_node_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() == 'hearing_page') {
    /** @var \Drupal\pathauto\PathautoGeneratorInterface $pathauto */
    $pathauto = \Drupal::service('pathauto.generator');
    $pathauto->updateEntityAlias($entity, 'update');
    _favrskov_hearings_push_to_cludo($entity->toUrl()->setAbsolute()->toString());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function favrskov_hearings_node_update(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() == 'hearing_page') {
    _favrskov_hearings_push_to_cludo($entity->toUrl()->setAbsolute()->toString());
  }
}

function _favrskov_hearings_push_to_cludo($page_url) {
  if (empty(getenv('CLUDO_API_KEY'))) {
    return;
  }
  $url = "https://api.cludo.com/api/v3/" . getenv('CLUDO_CUSTOMER_ID') . "/content/" . getenv('CLUDO_HEARINGS_CRAWLER_ID') . "/pushurls";
  \Drupal::httpClient()->post($url, [
    'json' => [$page_url],
    'auth' => [getenv('CLUDO_CUSTOMER_ID'), getenv('CLUDO_API_KEY')]
  ]);
}
