<?php

use Drupal\Core\Pager\PagerManagerInterface;
use Drupal\node\Entity\Node;

/**
* Alter the list of projects to be updated by locale's interface translation.
*
* Locale module attempts to update the translation of those modules returned
* by \Drupal\update\UpdateManager::getProjects(). Using this hook, the data
* returned by \Drupal\update\UpdateManager::getProjects() can be altered or
* extended.
*
* Modules or distributions that use a dedicated translation server should use
* this hook to specify the interface translation server pattern, or to add
* additional custom/non-Drupal.org modules to the list of modules known to
* locale.
* - "interface translation server pattern": URL of the .po translation files
*   used to download the files from. The URL contains tokens which will be
*   replaced by appropriate values.
* The following tokens are available for the server pattern:
* - "%core": Core version. Value example: "8.x".
* - "%project": Project name. Value examples: "drupal", "media_gallery".
* - "%version": Project version release. Value examples: "8.1", "8.x-1.0".
* - "%language": Language code. Value examples: "fr", "pt-pt".
*
* @param array $projects
*   Project data as returned by \Drupal\update\UpdateManager::getProjects().
*
* @see locale_translation_project_list()
* @ingroup interface_translation_properties
*/
function favrskov_hearings_locale_translation_projects_alter(array &$projects) {
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('favrskov_hearings')->getPath();
  $projects['favrskov_hearings']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}

/**
 * Implements hook_cron().
 */
function favrskov_hearings_cron() {
  $next_run = \Drupal::state()->get('favrskov_hearings_next_run', 0);
  if ($next_run > time()) {
    return;
  }

  $node_ids = \Drupal::entityQuery('node')
    ->condition('type', 'hearing_page')
    ->condition('field_deadline' , strtotime('-6 months'), '<')
    ->condition('status', 1)
    ->range(NULL, 100)
    ->execute();

  $nodes = Node::loadMultiple($node_ids);
  foreach ($nodes as $node) {
    $node->set('moderation_state', 'archived');
    $node->save();
  }

  \Drupal::state()->set('favrskov_hearings_next_run', strtotime('+1 day'));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function favrskov_hearings_preprocess_node__hearing_page(&$variables) {
  /** @var Node $node */
  $node = $variables['node'];
  if (isset($variables['content']['field_cta']) && isset($variables['content']['field_cta'][0])) {
    $variables['content']['field_cta'][0]['#attributes']['class'][] = 'button';
    $variables['content']['field_cta'][0]['#title'] = atom_str('hearings-cta');
    atom_cache($variables['content']['field_cta'][0], ['hearings-cta']);
  }
  $variables['content']['back_link'] = atom('hearings-back-link');
  $variables['content']['summary'] = ['#markup' => $node->get('body')->first()->getValue()['summary']];
}
