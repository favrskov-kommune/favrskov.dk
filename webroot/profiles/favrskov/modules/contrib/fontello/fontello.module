<?php

/**
 * @file fontello.module
 * Integrates the Fontello service as an icon provider for the Icon API.
 */

/**
 * Provide default bundle settings.
 */
function fontello_default_settings() {
  return array(
    'animation' => 1,
    'filename_prefix' => NULL,
    'ie7' => 1,
    'method' => 'default',
    'tag' => 'i',
  );
}

/**
 * Implements hook_icon_providers().
 */
function fontello_icon_providers() {
  $providers['fontello'] = array(
    'title' => t('Fontello'),
    'url' => 'http://fontello.com',
    'default bundle' => array(
      'render' => 'sprite',
      'settings' => fontello_default_settings(),
    ),
  );
  return $providers;
}

/**
 * Implements hook_icon_PROVIDER_import_validate().
 */
function fontello_icon_fontello_import_validate(&$bundle) {
  if (drupal_json_decode(file_get_contents($bundle['path'] . '/config.json'))) {
    return TRUE;
  }
  return t('The uploaded archive file does not contain a %config file. Ensure this is a proper archive file generated by !fontello.', array(
    '%config' => 'config.json',
    '!fontello' => l('Fontello', 'http://fontello.com'),
  ));
}

function fontello_get_config($path) {
  if (file_exists($path . '/config.json')) {
    return drupal_json_decode(file_get_contents($path . '/config.json'));
  }
  return FALSE;
}

/**
 * Implements hook_icon_PROVIDER_import_process().
 */
function fontello_icon_fontello_import_process(&$bundle) {
  if (!isset($bundle['settings']['filename_prefix'])) {
    $bundle['settings']['filename_prefix'] = 'fontello';
  }
  if (!empty($bundle['path']) && file_exists($bundle['path'] . '/config.json')) {
    if ($config = drupal_json_decode(file_get_contents($bundle['path'] . '/config.json'))) {
      if (!empty($config['name'])) {
        $bundle['settings']['filename_prefix'] = $config['name'];
      }
      $bundle['settings']['css_prefix_text'] = $config['css_prefix_text'];
      $bundle['settings']['css_use_suffix'] = $config['css_use_suffix'];
      if (!empty($config['glyphs'])) {
        foreach ($config['glyphs'] as $icon) {
          $bundle['icons'][($config['css_use_suffix'] ? $icon['css'] . $config['css_prefix_text'] : $config['css_prefix_text'] . $icon['css'])] = $icon['css'];
        }
        // Add processing callback.
        $bundle['#attached']['fontello_process_attached'] = array(array($bundle['name']));
      }
    }
  }
}

/**
 * Implements hook_preprocess_icon().
 */
function fontello_preprocess_icon(&$variables) {
  if (!empty($variables['bundle']['provider']) && $variables['bundle']['provider'] === 'fontello') {
    $variables['attributes']['class'][] = 'fontello';
  }
}

/**
 * CSS attach callback for a Fontello icon bundle.
 */
function fontello_process_attached($bundle_name) {
  $bundle = icon_bundle_load($bundle_name);
  if (!$bundle) {
    return;
  }
  // Applie default settings, just in case.
  $bundle['settings'] += fontello_default_settings();
  // Add some CSS for displaying Fontello icons properly. Noteably this helps
  // override the default icon styling packaged with certain base themes like
  // Bootstrap.
  $file = drupal_get_path('module', 'fontello') . '/css/fontello.fix.css';
  $css[$file] = array(
    'type' => 'file',
    'data' => $file,
  );
  // Determine which include method to use.
  $methods = array(
    'default' => $bundle['settings']['filename_prefix'] . '.css',
    'embedded' => $bundle['settings']['filename_prefix'] . '-embedded.css',
    'codes' => $bundle['settings']['filename_prefix'] . '-codes.css',
  );
  $file = $bundle['path'] . '/css/' . $methods[$bundle['settings']['method']];
  $css[$file] = array(
    'type' => 'file',
    'data' => $file,
  );
  // Determine whether to include animation support.
  if ($bundle['settings']['animation']) {
    $file = $bundle['path'] . '/css/animation.css';
    $css[$file] = array(
      'type' => 'file',
      'data' => $file,
    );
  }
  // Determine whether to include IE7 support.
  if ($bundle['settings']['ie7']) {
    $ie7 = array(
      'default' => $bundle['settings']['filename_prefix'] . '-ie7.css',
      'embedded' => $bundle['settings']['filename_prefix'] . '-ie7.css',
      'codes' => $bundle['settings']['filename_prefix'] . '-ie7-codes.css',
    );
    $file = $bundle['path'] . '/css/' . $ie7[$bundle['settings']['method']];
    $css[$file] = array(
      'type' => 'file',
      'data' => $file,
      'browsers' => array(
        'IE' => 'IE 7',
        '!IE' => FALSE
      ),
    );
  }
  foreach ($css as $data => $options) {
    drupal_add_css($data, $options);
  }
}

/**
 * Implements hook_icon_bundle_configure().
 */
function fontello_icon_bundle_configure(&$settings, &$form_state, &$complete_form) {
  $bundle = $form_state['bundle'];
  if ($bundle['provider'] === 'fontello') {
    $settings['animation'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Animation'),
      '#description' => t('For browsers that support CSS3 animations, add the class %animation to any icon to enable a spinning animation. This is useful for creating custom throbbers.', array('%animation' => '.animate-spin')),
      '#default_value' => $bundle['settings']['animation'],
    );
    $settings['ie7'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable IE7 Support'),
      '#default_value' => $bundle['settings']['ie7'],
    );
    $settings['method'] = array(
      '#type' => 'radios',
      '#title' => t('Include Method'),
      '#options' => array(
        'default' => '<strong>' . t('Default') . '</strong> - ' . t('This method is strongly recommended and is usually enough. It contains the @font-face and character codes definitions.'),
        'embedded' => '<strong>' . t('Embedded') . '</strong> - ' . t('Same as Default, however it contains the embedded WOFF font to avoid CORS issues in Firefox and IE9+, when fonts are hosted on a separate domain. It is strongly recommend to resolve this issue by adding appropriate "Access-Control-Allow-Origin" server headers.'),
        'codes' => '<strong>' . t('Codes Only') . '</strong> - ' . t('This method is for advanced use cases and will require the use of a custom @font-face declaration. This can be useful in cases where seperating out the font is necessary (like automated asset build systems), however still wishing to reap the beneifits of Fontello\'s CSS generation. This module does not yet support a separated font asset upload and will need to be added via the theme or a custom module. See Fontello source code for an example.'),
      ),
      '#default_value' => $bundle['settings']['method'],
    );
    $settings['tag'] = array(
      '#type' => 'select',
      '#title' => t('HTML Markup'),
      '#description' => t('Choose the HTML markup tag that Fontello icons should be created with. Typically, this is an %i tag, however it can be changed to suite the theme requirements.', array('%i' => '<i/>')),
      '#options' => drupal_map_assoc(array('i', 'span', 'div')),
      '#default_value' => $bundle['settings']['tag'],
    );
  }
}

/**
 * Implements hook_icon_bundle_delete().
 * Deletes the uploaded Fontello bundle from the file system.
 */
function fontello_icon_bundle_delete($bundle) {
  if ($bundle['provider'] === 'fontello' && file_exists($bundle['path'])) {
    file_unmanaged_delete_recursive($bundle['path']);
  }
}

/**
 * Download a webfont bundle configuration file.
 *
 * @param string $bundle
 *   An associative array containing the bundle settings.
 */
function fontello_download_config_callback($bundle) {
  if ($bundle) {
    global $user;
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $bundle['path'] . '/config.json';
    $file->filename = drupal_basename($bundle['path']) . '-' . drupal_basename($file->uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->filesize = filesize($file->uri);
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_PERMANENT;
    file_transfer($file->uri, file_get_content_headers($file));
  }
  drupal_not_found();
}

