<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\ViewExecutable;

/**
 * Theme hook.
 */
function premium_theme_helper_theme(): array {
  return [
    'breadcrumb' => [
      'variables' => [
        'links' => [],
        'narrow' => [],
        'breadcrumb_json_data' => [],
      ],
    ],
  ];
}

/**
 * Entity access, will only prevent access for the term page.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 * @param string $operation
 *   Operation.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   Account.
 *
 * @return \Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
 *   Access result.
 */
function premium_theme_helper_entity_access(EntityInterface $entity, string $operation, AccountInterface $account) {
  $bundles = [
    'link_lists',
    'media_categories',
    'news_categories',
  ];
  if ($operation === 'view' && $entity->getEntityTypeId() === 'taxonomy_term' && in_array($entity->bundle(), $bundles)) {
    /** @var \Drupal\Core\Routing\AdminContext $admin_context */
    $admin_context = \Drupal::service('router.admin_context');
    $route_match = \Drupal::routeMatch();
    // Only forbidden on a non-admin route.
    if (!$admin_context->isAdminRoute($route_match->getRouteObject())) {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}

/**
 * Layout alter - Change and remove definitions.
 *
 * @param array $definitions
 *   The discovered plugin definitions.
 */
function premium_theme_helper_layout_alter(array &$definitions) {
  _premium_theme_helper_layout_alter($definitions);
}

/**
 * Add libraries to specific elements.
 *
 * @param array $types
 *   An associative array with structure identical to that of the return value
 *   of \Drupal\Core\Render\ElementInfoManagerInterface::getInfo().
 */
function premium_theme_helper_element_info_alter(array &$types) {
  _premium_theme_helper_element_info_alter($types);
}

/**
 * Change layout builder class, so we can change structure in layout builder.
 *
 * @param array $definitions
 *   The discovered plugin definitions.
 */
function premium_theme_helper_element_plugin_alter(array &$definitions) {
  _premium_theme_helper_element_plugin_alter($definitions);
}

/**
 * Add header.
 *
 * @param array $variables
 *   Theme variables.
 */
function premium_theme_helper_preprocess_layout(array &$variables) {
  _premium_theme_helper_preprocess_layout($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function premium_theme_helper_preprocess_block__inline_block(&$variables) {
  _premium_theme_helper_preprocess_block__inline_block($variables);
}

/**
 * Theme suggestion for block contents.
 *
 * Change reusable blocks to have a theme suggestion to inline block,
 * so we don't get different templates.
 *
 * @param array $suggestions
 *   An array of theme suggestions.
 * @param array $variables
 *   An array of variables passed to the theme hook. Note that this hook is
 *   invoked before any preprocessing.
 */
function premium_theme_helper_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  _premium_theme_helper_theme_suggestions_block_alter($suggestions, $variables);
}

/**
 * Adding libraries to a view as pre render.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View.
 */
function premium_theme_helper_views_pre_render(ViewExecutable $view) {
  _premium_theme_helper_views_pre_render($view);
}

/**
 * Form alter - Adding libraries.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param string $form_id
 *   Form id.
 */
function premium_theme_helper_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  _premium_theme_helper_form_alter($form, $form_state, $form_id);
}
