<?php

/**
 * Aimed to collect hook_updates() and other staff.
 */

/**
 * Implements hook_install().
 */
function favrskov_helper_install() {
  array_map('features_revert_module', array(
    'panel_article_page',
    'panel_banner_page',
    'panel_factbox_page',
    'panel_faq_page',
    'panel_job_page',
    'panel_news_page',
    'panel_faq_page',
    'panel_phonebook',
    'panel_self_service_page',
    'panel_slider_page',
    'panel_webform_page',
  ));
}

/**
 * Translations adding and features reverting.
 */
function favrskov_helper_update_7000() {
  t('Vacancies');
  t('Application deadline');
  t('Place of work');
  t('Description');
  t('Apply link');
  t('Start date');

  locale_add_translation('Vacancies', 'da', 'Ledige stillinger');
  locale_add_translation('Application deadline', 'da', 'Ansøgningsfrist');
  locale_add_translation('Place of work', 'da', 'Arbejdssted');
  locale_add_translation('Description', 'da', 'Beskrivelse');
  locale_add_translation('Apply link', 'da', 'Søg stillingen via dette link');
  locale_add_translation('Start date', 'da', 'Ansøgningsfrist');

  locale_clear_cache();

  array_map('features_revert_module', array(
    'views_job',
    'feeds_job_importer',
    'panel_job_page',
  ));
}

/**
 * Domain features enabling.
 */
function favrskov_helper_update_7001() {
  $list = array(
    'config_domain',
    'config_domain_variables',
    'config_domain_alias',
    'config_domain_theme',
  );
  module_enable($list);
}

/**
 * Feature reverting.
 */
function favrskov_helper_update_7002() {
  features_revert(array('config_metatags'));
}

/**
 * View features reverting due to Picture module update.
 */
function favrskov_helper_update_7003() {
  array_map('features_revert_module', array(
    'view_slider',
    'views_banners',
  ));

  // Update of picture formatter that is using in panels.
  $query = db_select('panels_pane', 'pp')
    ->fields('pp', array('pid', 'configuration'))
    ->condition('panel', 'wide_image')
    ->condition('type', 'entity_field')
    ->execute();

  $result = $query->fetchAllKeyed();

  foreach ($result as $pid => $conf) {
    $new_conf = unserialize($conf);
    $picture_group = isset($new_conf['formatter_settings']['picture_group']);
    $picture_mapping = isset($new_conf['formatter_settings']['picture_mapping']);

    if ($picture_group && $picture_mapping) {
      unset($new_conf['formatter_settings']['picture_group']);
    }
    elseif ($picture_group && !$picture_mapping) {
      $new_conf['formatter_settings']['picture_mapping'] = $new_conf['formatter_settings']['picture_group'];
      unset($new_conf['formatter_settings']['picture_group']);
    }

    db_update('panels_pane')
      ->fields(array('configuration' => serialize($new_conf)))
      ->condition('pid', $pid)
      ->execute();
  }
}

/**
 * Change Subject Area term widget, update term filter conditions.
 */
function favrskov_helper_update_7004() {
  module_enable(array('hierarchical_select', 'hs_taxonomy'));

  $vocabulary = taxonomy_vocabulary_machine_name_load('subject_area');

  $term = new stdClass();
  $term->name = 'Favrskov.dk';
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  $query = db_update('taxonomy_term_hierarchy');
  $query->fields(array('parent' => $term->tid));
  $query->condition('tid', array(1689, 1688, 1701));
  $query->execute();

  array_map('features_revert_module', array(
    'content_type_article',
    'content_type_news',
    'content_type_subjectpage',
    'content_type_webform',
    'fields_shared',
    'view_blogs',
  ));
}

/**
 * Feature revert. URL-alias correction. Redirects addition.
 */
function favrskov_helper_update_7005() {
  features_revert_module('config_url_aliases');

  $wrong_alias_begin = 'favrskovdk-';

  $result = db_select('url_alias', 'ua')
    ->fields('ua', array('pid', 'source', 'alias'))
    ->condition('alias', "$wrong_alias_begin%", 'LIKE')
    ->execute()
    ->fetchAllAssoc('pid');

  foreach($result as $alias_object) {
    $right_alias = str_replace($wrong_alias_begin, '', $alias_object->alias);

    db_update('url_alias')
      ->fields(array('alias' => $right_alias))
      ->condition('pid', $alias_object->pid)
      ->execute();

    $redirect = new stdClass();
    redirect_object_prepare(
      $redirect,
      array(
        'source' => $alias_object->alias,
        'redirect' => $alias_object->source,
        'language' => 'da',
      )
    );

    redirect_save($redirect);
  }
}

/**
 * Addon to favrskov_helper_update_7005(). URL-alias correction. Redirects addition.
 */
function favrskov_helper_update_7006() {
  features_revert_module('config_url_aliases');

  $wrong_alias_begin = 'favrskovdk/';

  $result = db_select('url_alias', 'ua')
    ->fields('ua', array('pid', 'source', 'alias'))
    ->condition('alias', "$wrong_alias_begin%", 'LIKE')
    ->execute()
    ->fetchAllAssoc('pid');

  foreach($result as $alias_object) {
    $right_alias = str_replace($wrong_alias_begin, '', $alias_object->alias);

    db_update('url_alias')
      ->fields(array('alias' => $right_alias))
      ->condition('pid', $alias_object->pid)
      ->execute();

    $redirect = new stdClass();
    redirect_object_prepare(
      $redirect,
      array(
        'source' => $alias_object->alias,
        'redirect' => $alias_object->source,
        'language' => 'da',
      )
    );

    redirect_save($redirect);
  }
}

/**
 * Enable view_users_logs feature.
 */
function favrskov_helper_update_7007() {
  module_enable(array('view_users_logs'));
}

/**
 * Enable content_type_volunteer_jobs.
 */
function favrskov_helper_update_7008() {
  module_enable(
    array(
      'content_type_volunteer_jobs',
      'feeds_volunteer_jobs_importer',
      'views_volunteer_jobs',
    )
  );

  array_map('features_revert_module', array(
    'content_type_article',
    'panel_article_page',
    'content_type_job',
    'feeds_job_importer',
    'views_job',
  ));

  // String translations using context.
  t('Volunteer jobs', array(), array('context' => 'volunteer_jobs'));
  locale_add_translation('Volunteer jobs', 'da', 'Frivillige jobs', 'volunteer_jobs');
  locale_clear_cache();

  // Feeds "Volunteer jobs" importer setup.
  if (module_exists('feeds')) {
    $importer_id = 'volunteer_jobs';
    $source = 'http://feeds.favrskov.dk/frivilligejobs.json';
    $config = array(
      'FeedsHTTPFetcher' => array('source' => $source),
      'FeedsExJsonPath' => array(),
    );

    db_merge('feeds_source')
      ->key(array('id' => $importer_id, 'feed_nid' => 0))
      ->fields(array(
        'config' => serialize($config),
        'source' => $source,
        'state' => serialize(FALSE),
        'fetcher_result' => serialize(FALSE),
      ))
      ->execute();

    // Perform Volunteer jobs import.
    feeds_cache_clear();
    $source = feeds_source($importer_id);
    $result_code = $source->import();

    if (FEEDS_BATCH_COMPLETE == $result_code) {
      watchdog('volunteer_jobs', 'Successfull volunteer import.');
    }
    else {
      watchdog('volunteer_jobs', 'Import volunteer failed.');
    }

    $job_source = feeds_source('job_importer');
    $result_code = $job_source->import();

    if (FEEDS_BATCH_COMPLETE == $result_code) {
      watchdog('volunteer_jobs', 'Successfull job import.');
    }
    else {
      watchdog('volunteer_jobs', 'Import job failed.');
    }
  }
}

/**
 * Override admin_views_node view.
 */
function favrskov_helper_update_7009() {
  require(drupal_get_path('module', 'favrskov_helper') . '/views_import/favrskov_helper_update_7008.inc');

  $view = favrskov_helper_update_7008_get_view();
  if (isset($view)) {
    views_save_view($view);
  }
}

/**
 * String update.
 */
function favrskov_helper_update_7010() {
  t('Phn');
  locale_add_translation('Phn', 'da', 'Tlf.');
  locale_clear_cache();
}

/**
 * Revert config_url_aliases feature.
 */
function favrskov_helper_update_7011() {
  features_revert_module('config_url_aliases');
}

/**
 * Sets date_format_short for override default date format.
 */
function favrskov_helper_update_7012() {
  variable_set('date_format_short', 'd/m/Y - H:i');
}

/**
 * Sets date created, last access and login for two test users.
 */
function favrskov_helper_update_7013() {
  db_update('users')
    ->fields(array(
      'created' => strtotime('01-01-2013'),
      'access'=> strtotime('01-01-2013'),
      'login' => strtotime('01-01-2013'),
    ))
    ->condition('uid',array(1053,1055),'IN')
    ->execute();
}

/**
 * Feature revert.
 */
function favrskov_helper_update_7014() {
  features_revert_module('views_volunteer_jobs');
}

/**
 * Feature enable and revert.
 */
function favrskov_helper_update_7015() {
  module_enable(
    array(
      'icon',
      'icon_filter',
      'fontello',
    )
  );

  array_map('features_revert_module', array(
    'panel_footer_mini_panel',
    'text_formats_all',
  ));
}

/**
 * Features revert.
 */
function favrskov_helper_update_7016() {
  array_map('features_revert_module', array(
    'panel_job_page',
    'feeds_job_importer',
    'views_job',
    'content_type_job',
  ));
}

/**
 * Feature revert.
 */
function favrskov_helper_update_7017() {
  array_map('features_revert_module', array(
    'views_job',
    'content_type_news',
  ));
}

/**
 * Disable Comment and Comment related modules. Override contrib views.
 */
function favrskov_helper_update_7018() {
  module_disable(array(
    'rule_send_email_on_comment_posting',
    'config_comments',
    'panels_comments_unsubscribe',
    'ajax_comments',
    'comment_notify',
    'comment',
  ));

  module_enable(array(
    'views_control_users',
    'views_control_terms',
    'views_workbench_moderation',
  ));

  array_map('features_revert_module', array(
    'config_user_roles',
    'content_type_article',
    'content_type_faq',
    'content_type_news',
    'feeds_job_importer',
    'views_job',
  ));

  // By default workbench_moderation has weight 5 in a system table.
  // By default views_workbench_moderation has weight 0 in a system table.
  // We need change weight of views_workbench_moderation to higher value
  // than workbench_moderation has to perform overriding in a proper way.
  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'views_workbench_moderation')
    ->execute();
}

/**
 * header_mini_panel feature revert.
 */
function favrskov_helper_update_7019() {
  array_map('features_revert_module', array(
    'panel_header_mini_panel',
  ));
}

/**
 * Feature enable. Changes in system table.
 */
function favrskov_helper_update_7020() {
  module_enable(array(
    'views_control_content_panes',
    'panel_page_dashboard',
  ));

  // By default total_control has weight 0 in a system table.
  // By default panel_page_dashboard has weight 0 in a system table.
  // It leads to situation when panel_page_dashboard has not been detected after
  // enabling. We need change weight of panel_page_dashboard to higher value
  // than total_control has to perform overriding in a proper way.
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'panel_page_dashboard')
    ->execute();

  array_map('features_revert_module', array(
    'panel_news_page',
  ));
}

/**
 * Clean up domain_access table from deleted nodes.
 */
function favrskov_helper_update_7021() {
  // Get nids of deleted nodes from domain_access table. Ensure that there
  // aren`t nodes with this nids so that we will not corrupt any valuable node.
  $query = db_select('domain_access', 'da');
  $query->leftJoin('node', 'n', 'n.nid = da.nid');
  $nids = $query->fields('da', array('nid'))
    ->distinct()
    ->condition('n.nid', NULL, 'IS')
    ->execute()
    ->fetchCol();

  // Clean up domain_access table.
  db_delete('domain_access')
    ->condition('nid', $nids, 'IN')
    ->execute();
}

/**
 * Feature enable.
 */
function favrskov_helper_update_7022() {
  module_enable(array(
    'views_admin_nodes',
  ));

  // By default admin_views has weight 12 in a system table.
  // By default views_admin_nodes has weight 0 in a system table.
  // It leads to situation when views_admin_nodes has not been detected after
  // enabling. We need change weight of views_admin_nodes to higher value
  // than admin_views has to perform overriding in a proper way.
  db_update('system')
    ->fields(array('weight' => 15))
    ->condition('name', 'views_admin_nodes')
    ->execute();
}

/**
 * Features revert.
 */
function favrskov_helper_update_7023() {
  array_map('features_revert_module', array(
    'views_admin_nodes',
    'views_workbench_moderation',
  ));
}

/**
 * Features revert.
 */
function favrskov_helper_update_7024() {
  array_map('features_revert_module', [
    'panel_article_page',
  ]);
}

/**
 * Features revert.
 */
function favrskov_helper_update_7025() {
  array_map('features_revert_module', [
    'views_admin_nodes',
    'views_workbench_moderation',
  ]);
}

/**
 * Force jQuery loading from CDN. Should be temporary solution.
 */
function favrskov_helper_update_7026() {
  // More info: http://jira.propeople.com.ua/browse/FK-342.
  variable_set('jquery_update_jquery_cdn', 'jquery');
}

/**
 * Feature revert.
 */
function favrskov_helper_update_7027() {
  features_revert_module('config_user_roles');
}

/**
 * Feature revert.
 */
function favrskov_helper_update_7028() {
  features_revert_module('panel_header_mini_panel');
}

/**
 * Feature revert.
 */
function favrskov_helper_update_7029() {
  features_revert_module('panel_article_page');
}

/**
 * Updates news.
 */
function favrskov_helper_update_7030() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'news')
    ->condition('created', strtotime('06/12/2016'), '>=')
    ->condition('status', 1)
    ->execute();

  while($record = $query->fetchAssoc()) {
    $is_created = db_select('autoarch_state', 'autoarch')
      ->fields('autoarch', array('state'))
      ->condition('nid', $record['nid'])
      ->execute()
      ->fetchAssoc();

    if (!empty($is_created)) {
      autoarch_write_record('update', $record['nid'], 'actual', NULL);
    } else {
      autoarch_write_record('insert', $record['nid'], 'actual', NULL);
    }
  }
}

/**
 * Feature revert. Related to scheduler issue.
 */
function favrskov_helper_update_7031() {
  features_revert_module('config_user_roles');
}

/**
 * Feature revert. Header mini-panel layout update.
 */
function favrskov_helper_update_7032() {
  features_revert_module('panel_header_mini_panel');
}

/**
 * Feature revert. Header mini-panel layout update. Oplev visibility restriction.
 */
function favrskov_helper_update_7033() {
  features_revert_module('panel_header_mini_panel');
}

/**
 * Enable brand new setting for apachesolr_stats module.
 */
function favrskov_helper_update_7034() {
  $enabled_search_pages = array(
    'core_search' => 'core_search',
    'taxonomy_search' => 0,
  );
  variable_set('apachesolr_stats_enabled', $enabled_search_pages);

  // Add new apachesolr_stats block due to update of module.
  // Revert feature with this block.
  features_revert_module('panels_search');
}

/**
 * Disable contextual links for nodequeues
 * as a temporary fix for their interaction with views exposed forms.
 */
function favrskov_helper_update_7035() {
  variable_set('nodequeue_show_contextual_links', FALSE);
}

/**
 * Installs Cache Expiration module and configs for it.
 */
function favrskov_helper_update_7036() {
  module_enable(array(
    'expire',
    'config_cache_expiration',
  ));
}

/**
 * Find old token for images, documents and add to file usage.
 */
function favrskov_helper_update_7037() {
  $field_text_summary = field_read_fields(array('type' => 'text_with_summary'));
  $field_long_text = field_read_fields(array('type' => 'text_long'));
  $fields = array_merge($field_long_text, $field_text_summary);
  $fields_name = array_keys($fields);
  $result_value = array();
  foreach ($fields_name as $name) {
    $data_result = db_select('field_data_' . $name, 'fd')
      ->fields('fd', array('entity_type', 'entity_id'))
      ->condition($name . '_value', '%' . db_like('class="media-image') . '%', 'LIKE');
    $data_result->addField('fd', $name . '_value', 'value');
    $data_result = $data_result->execute()->fetchAll();
    $result_value = array_merge($result_value, array_values($data_result));
  }

  $files_usage = array();
  foreach ($result_value as $fields) {
    if (empty($fields)) {
      continue;
    }

    $file_pattern = preg_match('/<span.*class="file media-image.*<\/span>/', $fields->value, $file_match);
    $image_patern = preg_match('/<img.*class="media-image.*\/>/', $fields->value, $image_match);

    if ($image_match) {
      $image_url = preg_match('/src="([^"]+)"/', $image_match[0], $url);
      $last_part = explode('/', $url[1]);
      $fields->value = end($last_part);
      $files_usage[] = $fields;
    }
    if ($file_match) {
      $image_url = preg_match('/href="([^"]+)"/', $file_match[0], $url);
      $last_part = explode('/', $url[1]);
      $fields->value = end($last_part);
      $files_usage[] = $fields;
    }
  }

  foreach ($files_usage as $file) {
    $fid = db_select('file_managed', 'fm')
      ->fields('fm', array('fid'))
      ->condition('uri', '%' . db_like($file->value) . '%', 'LIKE')
      ->execute()
      ->fetchCol(0);
    if (!empty($fid[0])) {
      $file->fid = $fid[0];
    } else {
      continue;
    }

    file_usage_add($file, 'media', $file->entity_type, $file->entity_id);
  }

  module_enable(array(
    'media_ckeditor',
    'media_wysiwyg',
  ));

  array_map('features_revert_module', array(
    'config_media',
    'text_formats_all',
    'fields_shared',
  ));
}

/**
 * Add permission.
 */
function favrskov_helper_update_7038() {
  features_revert_module('config_user_roles');
}

/**
 * Need to use this update in order to find all matches.
 * Although we found image via uri it's not correct and we lost many of files.
 * Save file with error output into tmp folder.
 */
function favrskov_helper_update_7039() {
  $field_text_summary = field_read_fields(array('type' => 'text_with_summary'));
  $field_long_text = field_read_fields(array('type' => 'text_long'));
  $fields = array_merge($field_long_text, $field_text_summary);
  $fields_name = array_keys($fields);
  $result_value = array();
  foreach ($fields_name as $name) {
    $data_result = db_select('field_data_' . $name, 'fd')
      ->fields('fd', array('entity_type', 'entity_id'))
      ->condition($name . '_value', '%' . db_like('media-image') . '%', 'LIKE');
    $data_result->addField('fd', $name . '_value', 'value');
    $data_result = $data_result->execute()->fetchAll();
    $result_value = array_merge($result_value, $data_result);
  }

  $location = 'temporary://node_errors.txt';
  $fp = fopen($location, "w");

  foreach ($result_value as $fields) {
    if (empty($fields)) {
      continue;
    }

    preg_match_all('/<span.*class="file media-image.*<\/span>/', $fields->value, $file_match);
    preg_match_all('/<img.*class="media-image.*\/>/', $fields->value, $image_match);
    $array_matches = array_merge($file_match[0], $image_match[0]);

    foreach ($array_matches as $match) {
      $files_match = preg_match('/"(media-image|file media-image).+img__fid__(\d+)/', $match, $url);

      if ($files_match != 0) {
        $std_file = new stdClass();
        $std_file->fid = $url[2];
        $std_file->entity_id = $fields->entity_id;
        $std_file->entity_type = $fields->entity_type;
        $source_pattern = $url[1] == 'media-image' ? '/src="([^"]+)"/' : '/href="([^"]+)"/';
        preg_match($source_pattern, $match, $src);

        if (isset($src[1])) {
          $last_part = explode('/', $src[1]);
          $std_file->link = end($last_part);
        }

        $error = FALSE;

        if (empty($std_file->fid) || empty($std_file->link)) {
          continue;
        }

        $fid = db_select('file_managed', 'fm')
          ->fields('fm', array('fid', 'uri'))
          ->condition('fid', $std_file->fid)
          ->execute()
          ->fetchAll();
        if (empty($fid[0])) {
          $output = sprintf('Doesn\'t exist -> Node entity: %s, node id: %s, file id: %s', $std_file->entity_type, $std_file->entity_id, $std_file->fid);
          $error = TRUE;
          fwrite($fp, $output . PHP_EOL);
        } elseif (isset($std_file->link)) {
          if (strpos($fid[0]->uri, $std_file->link) === FALSE) {
            $output = sprintf('Wrong link -> Node entity: %s, node id: %s, file id: %s, actual file name: %s, file name in link: %s',
              $std_file->entity_type, $std_file->entity_id, $std_file->fid, $fid[0]->uri, $std_file->link);
            $error = TRUE;
            fwrite($fp, $output . PHP_EOL);
          }
        }

        if (!$error) {
          file_usage_add($std_file, 'media', $std_file->entity_type, $std_file->entity_id);
        }

      }
    }
  }

  fclose($fp);
}

/**
 * Revert feature.
 */
function favrskov_helper_update_7040() {
  features_revert_module('config_media');
}

/**
 * Revert features for wysiwyg dispaly.
 */
function favrskov_helper_update_7041() {
  array_map('features_revert_module', array(
    'config_media',
    'fields_shared',
  ));
}

/**
 * Change default view mode to wysiwyg for document files.
 */
function favrskov_helper_update_7042() {
  $field_text_summary = field_read_fields(array('type' => 'text_with_summary'));
  $field_long_text = field_read_fields(array('type' => 'text_long'));
  $fields = array_merge($field_long_text, $field_text_summary);
  $fields_name = array_keys($fields);
  $result_value = array();

  foreach ($fields_name as $name) {
    $versions_name = array('field_data_', 'field_revision_');
    foreach ($versions_name as $version_name) {
      $table_name = $version_name . $name;
      $value_name = $name . '_value';
      db_query('UPDATE '. $table_name .' SET
      ' . $value_name . ' = REPLACE(' . $value_name . ', \'"view_mode":"default"\', \'"view_mode":"wysiwyg"\') WHERE '
        . $value_name . ' LIKE \'%media-element%\'');
    }
  }
}

/**
 * Update default view mode for Documents.
 */
function favrskov_helper_update_7043() {
  features_revert_module('config_media');
}

/**
 * Resave node with empty table field to avoid empty field in UI.
 */
function favrskov_helper_update_7044() {
  $nodes = db_select('field_data_field_table', 'ft')
    ->fields('ft', array('entity_id'))
    ->isNotNull('field_table_value')
    ->execute()->fetchCol();

  $loaded_nodes = node_load_multiple($nodes);

  foreach ($loaded_nodes as $node) {
    $field_value = unserialize($node->field_table[LANGUAGE_NONE][0]['value']);

    if (!empty($field_value)) {
      $validation = function($field) {
        if (!isset($field['rebuild'])) {
          return TRUE;
        }

        $table_rebuild = $field['rebuild'];

        for ($i = 0; $i < $table_rebuild['count_rows']; $i++) {
          for ($j = 0; $j < $table_rebuild['count_cols']; $j++) {
            $cell = 'cell_' . $i . '_' . $j;
            if (!empty($field[$cell]) && isset($field[$cell])) {
              return FALSE;
            }
          }
        }

        return TRUE;
      };

      if ($validation($field_value)) {
        $node->field_table[LANGUAGE_NONE][0]['value'] = 'a:0:{}';
        node_save($node);
      }

    }
  }
}

/**
 * Revert feature content type article to remove required from image field.
 */
function favrskov_helper_update_7045() {
  features_revert_module('content_type_article');
}

/**
 * Reuse old method to avoid empty table fields.
 */
function favrskov_helper_update_7046() {
  favrskov_helper_update_7044();
  favrskov_helper_update_7045();
}

/**
 * Change field table to 0x0 for news content type.
 */
function favrskov_helper_update_7047() {
  features_revert_module('content_type_news');
  favrskov_helper_update_7044();
}

/**
 * Change ArticleStatus from -1 to 0 to avoid Soap error and fetch new
 * ArticleStatus from borger.dk API.
 */
function favrskov_helper_update_7048() {
  db_update('os2web_borger_dk_titles')
    ->fields(array('ArticleStatus' => 0))
    ->condition('ArticleStatus', '-1')
    ->execute();
}

/**
 * Update for Slider Block: html + js banners.
 */
function favrskov_helper_update_7049() {
  module_enable(array('file_type_banner'));
  features_revert_module('view_slider');
  features_revert_module('content_type_slider_element');
}

/**
 * Implements hook_update_7050
 * Enable Media bulk upload module and its dependencies.
 */
function favrskov_helper_update_7050() {
  module_enable(array('media_bulk_upload'));
}

/**
 * Implements hook_update_7051
 * Revert feature 'views_job'.
 */
function favrskov_helper_update_7051() {
  features_revert_module('views_job');
}
/**
 * Implements hook_update_7052
 * Uninstall devel and stage_file_proxy modules
 */
function favrskov_helper_update_7052() {
  drupal_uninstall_modules(array('devel','stage_file_proxy'), FALSE);
}

/**
 * Implements hook_update_7053
 * Revert feature 'views_news'.
 */
function favrskov_helper_update_7053() {
  features_revert_module('views_news');
}

/**
 * Delete {system} records for missing modules.
 */
function favrskov_helper_update_7054() {
  $modules = array(
    'ajax_comments',
    'comment_notify',
    'menu_editor',
    'config_background_image',
    'config_comments',
    'content_type_blog',
    'content_type_hearing',
    'content_type_location',
    'fields_esdh_case_document',
    'os2web_hrmanager_job',
    'os2web_kultunaut',
    'os2web_social_directory',
    'panels_comments_unsubscribe',
    'panels_social_directory',
    'panels_social_directory_listing',
    'panel_article_below_body_mini_panel',
    'panel_blog_page',
    'panel_front_page',
    'panel_hearing_page',
    'panel_hearing_response_form',
    'panel_hearing_response_page',
    'panel_kultunaut_event',
    'panel_location_page',
    'pane_hearing_responses',
    'rss_blog',
    'rule_send_email_on_comment_posting',
    'taxonomy_hearing_category',
    'views_administration_nodes',
    'views_events',
    'views_hearings',
    'views_hr_manager_job_custom_panes',
    'views_locations',
    'view_matrix'
  );

  db_delete('system')
    ->condition('name', $modules, 'IN')
    ->condition('type', 'module')
    ->execute();
}

