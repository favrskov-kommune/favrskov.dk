<?php
/**
 * @file
 * Code for the Config Search feature.
 */

include_once 'config_search.features.inc';


/**
 * Implements hook_menu_alter().
 *
 * Disable standard search pages.
 *
 * @param $items
 *  menu items
 */
function config_search_menu_alter(&$items) {
  unset($items['search/user']);
  unset($items['search/node']);
}


/**
 * Implements hook_apachesolr_process_results().
 *
 * Nodes of type 'self_service' links to external url field of this node, not to node page.
 *
 * @param array $results
 *   The returned search results.
 * @param DrupalSolrQueryInterface $query
 *   The query for which we want to process the results from
 */
function config_search_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
  foreach ($results as $id => $result) {
    switch ($result['fields']['bundle']) {
      case 'self_service':
      case 'bannerlink':
        $results[$id]['link'] = $result['fields']['ts_field_external_url'];
        break;
    }
  }
}

/**
 * Implements hook_apachesolr_index_document_build().
 */
function config_search_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  // Deal with domains functionality.
  $entity_domains = isset($entity->domains) ? $entity->domains : domain_id_list();

  foreach ($entity_domains as $domain) {
    // The gid in the {domain} table is unsigned, but the domain module makes
    // it -1 for the deault domain. Also apache doesn't like it if we query
    // for domain id -1.
    if ($domain == -1) {
      $domain = 0;
    }

    // Build an apachesolr-compatible domain search index key.
    $key = array(
      'name'  => 'domain_id',
      'multiple'  => TRUE,
      'index_type'  => 'integer',
    );
    $key = apachesolr_index_key($key);

    // Add domain key to document.
    $document->addField($key, $domain);
  }
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 *
 * Adds custom fields to solr index.
 * Also replaces title with displayed title for Self Service.
 *
 * @param ApacheSolrDocument $document
 * @param object $entity
 * @param string $env_id
 *   The machine name of the environment.
 */
function config_search_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  switch ($entity->type) {
    case 'self_service':
    case 'bannerlink':
      $external_url = field_get_items('node', $entity, 'field_external_link');
      $document->addField('ts_field_external_url', $external_url[0]['url']);

      $admin_label = field_get_items('node', $entity, 'field_displayed_title');
      $document->setField('label', $admin_label[0]['value']);
      $document->setField('tos_content_extra', '(' . $admin_label[0]['value'] . ')');
      break;
  }
}

/**
 * Implements hook_apachesolr_query_prepare().
 *
 * Adds additional fields to return by solr.
 * Also contains logic to search or not to search by meeting nodes, phonebooks.
 *
 * @param DrupalSolrQueryInterface $query
 *  An object implementing DrupalSolrQueryInterface.
 */
function config_search_apachesolr_query_prepare($query) {
  $query->addParam('fl', 'ts_field_external_url');

  //Add some boost for nodes with newer creation date.
  $query->addParam('bf', 'recip(ms(NOW,ds_created),3.16e-11,4,4)^10.0');

  // Restrict searchable content types.
  if (!empty($_GET['phonebooks'])){
    $query->addParam('fq', 'bundle:(phone_book)');
  }else{
    $query->addParam('fq', '-bundle:(phone_book)');
  }
}

/**
 * Implements hook_apachesolr_query_alter().
 *
 * Adds compability of solr panels with solr multilingual module.
 *
 * @param DrupalSolrQueryInterface $query
 *   An object implementing DrupalSolrQueryInterface. No need for &.
 */
function config_search_apachesolr_query_alter($query) {
  $query->addContext(array('page_id' => apachesolr_search_default_search_page()));

  // Add domain key to filter all queries.
  $domain = domain_get_domain();
  $query->addParam('fq', 'im_domain_id:' . $domain['domain_id']);
}

/**
 * Implements hook_node_view().
 *
 * Removes from indexing titles for Self Service, Bannerlink, FAQ, and Factbox.
 */
function config_search_node_view($node, $view_mode, $langcode) {
  static $not_indexed_title_bundles = array('self_service', 'faq', 'factbox', 'bannerlink');
  if ($view_mode === 'search_index') {
    if (in_array($node->type, $not_indexed_title_bundles)) {
      $node->title = '';
    }
  }
}

/**
 * Implements hook_node_view_alter().
 *
 * Removes Contextual links from indexing for embedded content types.
 */
function config_search_node_view_alter(&$build) {
  if ($build['#view_mode'] === 'search_index') {
    if (isset($build['#contextual_links'])) {
      unset($build['#contextual_links']);
    }
  }
}
